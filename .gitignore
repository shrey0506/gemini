use# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

from pdfminer.high_level import extract_text
from tabula import read_pdf
import pandas as pd

def extract_tables_from_pdf(pdf_path):
    """
    Extracts tables from a PDF document using tabula.

    Args:
        pdf_path: Path to the PDF file.

    Returns:
        A list of pandas DataFrames, one for each table extracted.
    """

    try:
        # Extract text from the PDF using pdfminer
        text = extract_text(pdf_path)

        # Attempt to extract tables using tabula
        tables = read_pdf(pdf_path, pages='all', multiple_tables=True, encoding='utf-8')

        # Check if tabula found any tables
        if not tables:
            print(f"No tables found in {pdf_path} using tabula.")
            return []

        # Clean up tables (optional)
        cleaned_tables = []
        for table in tables:
            # Handle empty cells or NaN values
            table = table.fillna('')
            cleaned_tables.append(table)

        return cleaned_tables

    except Exception as e:
        print(f"Error extracting tables from {pdf_path}: {e}")
        return []

# Replace 'path/to/your/pdf.pdf' with the actual path to your PDF file
pdf_path = 'path/to/your/pdf.pdf' 

tables = extract_tables_from_pdf(pdf_path)

# Print the extracted tables (or save them to CSV/Excel)
for i, table in enumerate(tables):
    print(f"Table {i+1}:")
    print(table)
    # Save table to CSV (optional)
    # table.to_csv(f'table_{i+1}.csv', index=False)








from pdfminer.high_level import extract_text
from pdfminer.layout import LTTextBoxHorizontal

def extract_object_data(pdf_path):
    """
    Extracts the "Objects" column and its data from the given PDF file.

    Args:
        pdf_path: Path to the PDF file.

    Returns:
        A list of strings, where each string represents the "Objects" data for a row.
    """

    object_data = []

    try:
        text = extract_text(pdf_path)
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
        return object_data

    # Split the text into lines
    lines = text.splitlines()

    # Find the index of the "Objects" header
    try:
        header_index = lines.index("Objects")
    except ValueError:
        print("Error: 'Objects' header not found in the PDF.")
        return object_data

    # Iterate through lines starting from the header
    current_object_data = ""
    for i in range(header_index + 1, len(lines)):
        line = lines[i].strip()

        # Check if the line is empty or starts with a number (indicating a new row)
        if not line or line.startswith(tuple(str(i) for i in range(10))):
            if current_object_data:
                object_data.append(current_object_data.strip())
                current_object_data = ""
        else:
            current_object_data += line + " "

    # Add the last object data (if any)
    if current_object_data:
        object_data.append(current_object_data.strip())

    return object_data

# Example usage
pdf_path = "publicindex_latest-020125.pdf"  # Replace with the actual path
object_data_list = extract_object_data(pdf_path)

for data in object_data_list:
    print(data)




from tabula import read_pdf
import pandas as pd

def extract_tables_from_pdf(pdf_path):
    """
    Extracts tables from a PDF document using tabula.

    Args:
        pdf_path: Path to the PDF file.

    Returns:
        A list of pandas DataFrames, one for each table extracted.
    """

    try:
        # Attempt to extract tables using tabula
        tables = read_pdf(pdf_path, pages='all', multiple_tables=True, encoding='utf-8')

        # Check if tabula found any tables
        if not tables:
            print(f"No tables found in {pdf_path} using tabula.")
            return []

        # Clean up tables (optional)
        cleaned_tables = []
        for table in tables:
            # Handle empty cells or NaN values
            table = table.fillna('')
            cleaned_tables.append(table)

        return cleaned_tables

    except Exception as e:
        print(f"Error extracting tables from {pdf_path}: {e}")
        return []



///working code

from pdfminer.high_level import extract_text
from tabula import read_pdf
import pandas as pd

def extract_tables_from_pdf(pdf_path):
    """
    Extracts tables from a PDF document using tabula.

    Args:
        pdf_path: Path to the PDF file.

    Returns:
        A list of pandas DataFrames, one for each table extracted.
    """

    try:
        # Extract text from the PDF using pdfminer
        text = extract_text(pdf_path)

        # Attempt to extract tables using tabula
        tables = read_pdf(pdf_path, pages='all', multiple_tables=True, encoding='utf-8')

        # Check if tabula found any tables
        if not tables:
            print(f"No tables found in {pdf_path} using tabula.")
            return []

        # Clean up tables (optional)
        cleaned_tables = []
        for table in tables:
            # Handle empty cells or NaN values
            table = table.fillna('')
            cleaned_tables.append(table)

        return cleaned_tables

    except Exception as e:
        print(f"Error extracting tables from {pdf_path}: {e}")
        return []

# Replace 'path/to/your/pdf.pdf' with the actual path to your PDF file
# pdf_path = 'path/to/your/pdf.pdf' 
pdf_path = "publicindex_latest-020125.pdf"

tables = extract_tables_from_pdf(pdf_path)

# Print the extracted tables (or save them to CSV/Excel)
for i, table in enumerate(tables):
  table.to_csv(f'table_{i+1}.csv', index=False)
    # Save table to CSV (optional)
    # table.to_csv(f'table_{i+1}.csv', index=False)
 
import fitz  # PyMuPDF
import pandas as pd

def extract_text_blocks(pdf_path):
    # Open the PDF file
    doc = fitz.open(pdf_path)
    text_blocks = []

    # Extract text blocks with their bounding boxes
    for page_num in range(len(doc)):
        page = doc.load_page(page_num)
        blocks = page.get_text("blocks")  # Extract text blocks with coordinates
        text_blocks.extend(blocks)

    return text_blocks

def reconstruct_table(text_blocks):
    # Initialize variables to store table data
    table_data = []
    current_row = []

    # Sort text blocks by their vertical position (top to bottom)
    text_blocks.sort(key=lambda block: block[1])  # Sort by y1 coordinate (top of the block)

    # Process text blocks to reconstruct the table
    for block in text_blocks:
        x0, y0, x1, y1, text, block_no, block_type = block
        if text.strip():  # Skip empty blocks
            # Split text into lines (for multiline cells)
            lines = text.strip().split('\n')
            for line in lines:
                if line.strip():  # Skip empty lines
                    current_row.append(line.strip())

            # If the current row has enough columns, add it to the table data
            if len(current_row) >= 6:  # Adjust based on the number of columns in your table
                table_data.append(current_row)
                current_row = []

    # Convert the table data into a DataFrame
    df = pd.DataFrame(table_data)
    return df

def main():
    pdf_path = '1000031135.pdf'  # Replace with your PDF file path
    text_blocks = extract_text_blocks(pdf_path)
    reconstructed_table = reconstruct_table(text_blocks)

    # Save the reconstructed table to a CSV file for verification
    reconstructed_table.to_csv('reconstructed_table_with_multiline.csv', index=False)

    # Print the reconstructed table
    print(reconstructed_table)

if __name__ == "__main__":
    main()
