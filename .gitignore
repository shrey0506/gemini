use# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

import re
import pandas as pd


# Function to process the text and extract relevant information
def process_text(text):
    # Split the text into individual charity entries
    charity_entries = re.split(r'(?m)^\d{3,4}\s', text)[1:]
    charity_numbers = re.findall(r'(?m)^\d{3,4}', text)

    # Initialize lists for each column
    numbers = []
    charities = []
    objects = []
    addresses = []
    emails = []
    websites = []
    dates = []

    # Loop through each charity entry to extract information
    for entry in charity_entries:
        # Extract charity number
        number_match = re.search(r'^\d{3,4}', entry)
        if number_match:
            numbers.append(number_match.group(0))
        else:
            numbers.append('')  # Fill with empty string if no match
        
        # Extract charity name
        charity_match = re.search(r'^\d{3,4}\s([A-Z][A-Z0-9\s\-\(\)]*[A-Z\)])', entry)
        if charity_match:
            charities.append(charity_match.group(1).strip())
        else:
            charities.append('')  # Fill with empty string if no match
        
        # Extract objects (content before the address block)
        object_match = re.search(r'^(.*?)(?=\n[^\n]*IM\d\s\d[A-Z]{2})', entry, re.DOTALL)
        if object_match:
            objects.append(object_match.group(1).strip())
        else:
            objects.append('')  # Fill with empty string if no match
        
        # Extract address (block ending with postal code)
        address_match = re.search(r'([^\n]*\n)*[^\n]*IM\d\s\d[A-Z]{2}', entry, re.DOTALL)
        if address_match:
            addresses.append(address_match.group(0).strip())
        else:
            addresses.append('')  # Fill with empty string if no match
        
        # Extract email
        email_match = re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', entry)
        if email_match:
            emails.append(email_match.group(0))
        else:
            emails.append('')  # Fill with empty string if no match
        
        # Extract website
        website_match = re.search(r'(www\.[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:\.[a-zA-Z]{2,})?)', entry)
        if website_match:
            websites.append(website_match.group(0))
        else:
            websites.append('')  # Fill with empty string if no match
        
        # Extract date
        date_match = re.search(r'\d{1,2} [A-Za-z]{3} \d{4}|\d{4}', entry)
        if date_match:
            dates.append(date_match.group(0))
        else:
            dates.append('')  # Fill with empty string if no match

    # Create a DataFrame
    df = pd.DataFrame({
        'No.': numbers,
        'Charity': charities,
        'Objects': objects,
        'Correspondence address': addresses,
        'Email address': emails,
        'Website': websites,
        'Date Registered': dates
    })

    return df

# Process the text and create the DataFrame
df = process_text(text)

# Display the DataFrame
df.head()
